{"code":"import * as tfc from '@tensorflow/tfjs-core';\r\nimport { tidy } from '@tensorflow/tfjs-core';\r\nimport * as K from './backend/tfjs_backend';\r\nimport { ValueError } from './errors';\r\nexport function meanSquaredError(yTrue, yPred) {\r\n    return tidy(function () { return tfc.mean(K.square(tfc.sub(yPred, yTrue)), -1); });\r\n}\r\nexport function meanAbsoluteError(yTrue, yPred) {\r\n    return tidy(function () { return tfc.mean(tfc.abs(tfc.sub(yPred, yTrue)), -1); });\r\n}\r\nexport function meanAbsolutePercentageError(yTrue, yPred) {\r\n    return tidy(function () {\r\n        var diff = tfc.sub(yTrue, yPred);\r\n        var clippedTrue = tfc.clipByValue(tfc.abs(yTrue), K.epsilon(), Number.MAX_VALUE);\r\n        var absResult = tfc.abs(tfc.div(diff, clippedTrue));\r\n        return K.scalarTimesArray(K.getScalar(100.0), tfc.mean(absResult, -1));\r\n    });\r\n}\r\nexport function meanSquaredLogarithmicError(yTrue, yPred) {\r\n    return tidy(function () {\r\n        var one = K.getScalar(1.0);\r\n        var clippedPred = tfc.clipByValue(yPred, K.epsilon(), Number.MAX_VALUE);\r\n        var firstLog = tfc.log(K.scalarPlusArray(one, clippedPred));\r\n        var clippedTrue = tfc.clipByValue(yTrue, K.epsilon(), Number.MAX_VALUE);\r\n        var secondLog = tfc.log(K.scalarPlusArray(one, clippedTrue));\r\n        return tfc.mean(K.square(tfc.sub(firstLog, secondLog)), -1);\r\n    });\r\n}\r\nexport function squaredHinge(yTrue, yPred) {\r\n    return tidy(function () {\r\n        var zeroTensor = K.getScalar(0.0);\r\n        var one = K.getScalar(1.0);\r\n        var maxResult = tfc.maximum(zeroTensor, tfc.sub(one, tfc.mul(yTrue, yPred)));\r\n        return tfc.mean(K.square(maxResult), -1);\r\n    });\r\n}\r\nexport function hinge(yTrue, yPred) {\r\n    return tidy(function () {\r\n        var zeroTensor = K.getScalar(0.0);\r\n        var one = K.getScalar(1.0);\r\n        var maxResult = tfc.maximum(zeroTensor, tfc.sub(one, tfc.mul(yTrue, yPred)));\r\n        return tfc.mean(maxResult, -1);\r\n    });\r\n}\r\nexport function categoricalHinge(yTrue, yPred) {\r\n    return tidy(function () {\r\n        var zeroTensor = K.getScalar(0.0);\r\n        var one = K.getScalar(1.0);\r\n        var pos = tfc.sum(tfc.mul(yTrue, yPred), -1);\r\n        var neg = tfc.max(tfc.mul(tfc.sub(one, yTrue), yPred), -1);\r\n        return tfc.maximum(zeroTensor, K.scalarPlusArray(one, tfc.sub(neg, pos)));\r\n    });\r\n}\r\nexport function logcosh(yTrue, yPred) {\r\n    return tidy(function () {\r\n        var log2 = K.getScalar(Math.log(2.0));\r\n        var predictionDiff = tfc.sub(yPred, yTrue);\r\n        var logcoshResult = tfc.sub(tfc.add(predictionDiff, tfc.softplus(K.scalarTimesArray(K.getScalar(-2.0), predictionDiff))), log2);\r\n        return tfc.mean(logcoshResult, -1);\r\n    });\r\n}\r\nexport function categoricalCrossentropy(yTrue, yPred) {\r\n    return tidy(function () { return K.categoricalCrossentropy(yTrue, yPred); });\r\n}\r\nexport function sparseCategoricalCrossentropy(yTrue, yPred) {\r\n    return tidy(function () { return K.sparseCategoricalCrossentropy(yTrue, yPred); });\r\n}\r\nexport function binaryCrossentropy(yTrue, yPred) {\r\n    return tidy(function () { return tfc.mean(K.binaryCrossentropy(yTrue, yPred), -1); });\r\n}\r\nexport function kullbackLeiblerDivergence(yTrue, yPred) {\r\n    return tidy(function () {\r\n        var clippedTrue = tfc.clipByValue(yTrue, K.epsilon(), 1);\r\n        var clippedPred = tfc.clipByValue(yPred, K.epsilon(), 1);\r\n        return tfc.sum(tfc.mul(yTrue, tfc.log(tfc.div(clippedTrue, clippedPred))), -1);\r\n    });\r\n}\r\nexport function poisson(yTrue, yPred) {\r\n    return tidy(function () {\r\n        var logPred = tfc.log(K.scalarPlusArray(K.getScalar(K.epsilon()), yPred));\r\n        return tfc.mean(tfc.sub(yPred, tfc.mul(yTrue, logPred)), -1);\r\n    });\r\n}\r\nexport function cosineProximity(yTrue, yPred) {\r\n    return tidy(function () {\r\n        var trueNormalized = K.l2Normalize(yTrue, -1);\r\n        var predNormalized = K.l2Normalize(yPred, -1);\r\n        var trueXPred = tfc.mul(trueNormalized, predNormalized);\r\n        return tfc.neg(tfc.sum(trueXPred, -1));\r\n    });\r\n}\r\nexport var mse = meanSquaredError;\r\nexport var MSE = meanSquaredError;\r\nexport var mae = meanAbsoluteError;\r\nexport var MAE = meanAbsoluteError;\r\nexport var mape = meanAbsolutePercentageError;\r\nexport var MAPE = meanAbsolutePercentageError;\r\nexport var msle = meanSquaredLogarithmicError;\r\nexport var MSLE = meanSquaredLogarithmicError;\r\nexport var kld = kullbackLeiblerDivergence;\r\nexport var KLD = kullbackLeiblerDivergence;\r\nexport var cosine = cosineProximity;\r\nexport function get(identifierOrFn) {\r\n    var lossesMap = {\r\n        meanSquaredError: meanSquaredError,\r\n        meanAbsoluteError: meanAbsoluteError,\r\n        meanAbsolutePercentageError: meanAbsolutePercentageError,\r\n        meanSquaredLogarithmicError: meanSquaredLogarithmicError,\r\n        squaredHinge: squaredHinge,\r\n        hinge: hinge,\r\n        categoricalHinge: categoricalHinge,\r\n        logcosh: logcosh,\r\n        categoricalCrossentropy: categoricalCrossentropy,\r\n        sparseCategoricalCrossentropy: sparseCategoricalCrossentropy,\r\n        binaryCrossentropy: binaryCrossentropy,\r\n        kullbackLeiblerDivergence: kullbackLeiblerDivergence,\r\n        poisson: poisson,\r\n        cosineProximity: cosineProximity\r\n    };\r\n    if (typeof identifierOrFn === 'string') {\r\n        if (identifierOrFn in lossesMap) {\r\n            return lossesMap[identifierOrFn];\r\n        }\r\n        throw new ValueError(\"Unknown loss \" + identifierOrFn);\r\n    }\r\n    else {\r\n        return identifierOrFn;\r\n    }\r\n}\r\n//# sourceMappingURL=losses.js.map","map":"{\"version\":3,\"file\":\"losses.js\",\"sourceRoot\":\"\",\"sources\":[\"src/losses.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/cais/tfjs/tfjs-layers/losses.d.ts","text":"import { Tensor } from '@tensorflow/tfjs-core';\r\nimport { LossOrMetricFn } from './types';\r\nexport declare function meanSquaredError(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function meanAbsoluteError(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function meanAbsolutePercentageError(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function meanSquaredLogarithmicError(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function squaredHinge(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function hinge(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function categoricalHinge(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function logcosh(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function categoricalCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function sparseCategoricalCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function kullbackLeiblerDivergence(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function poisson(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function cosineProximity(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare const mse: typeof meanSquaredError;\r\nexport declare const MSE: typeof meanSquaredError;\r\nexport declare const mae: typeof meanAbsoluteError;\r\nexport declare const MAE: typeof meanAbsoluteError;\r\nexport declare const mape: typeof meanAbsolutePercentageError;\r\nexport declare const MAPE: typeof meanAbsolutePercentageError;\r\nexport declare const msle: typeof meanSquaredLogarithmicError;\r\nexport declare const MSLE: typeof meanSquaredLogarithmicError;\r\nexport declare const kld: typeof kullbackLeiblerDivergence;\r\nexport declare const KLD: typeof kullbackLeiblerDivergence;\r\nexport declare const cosine: typeof cosineProximity;\r\nexport declare function get(identifierOrFn: string | LossOrMetricFn): LossOrMetricFn;\r\n"}}
