{"code":"import * as tslib_1 from \"tslib\";\r\nimport { movingAverage, serialization, tidy, util } from '@tensorflow/tfjs-core';\r\nimport * as K from '../backend/tfjs_backend';\r\nimport { getConstraint, serializeConstraint } from '../constraints';\r\nimport { InputSpec, Layer } from '../engine/topology';\r\nimport { ValueError } from '../errors';\r\nimport { getInitializer, serializeInitializer } from '../initializers';\r\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\r\nimport * as generic_utils from '../utils/generic_utils';\r\nimport { arrayProd, range } from '../utils/math_utils';\r\nvar BatchNormalization = (function (_super) {\r\n    tslib_1.__extends(BatchNormalization, _super);\r\n    function BatchNormalization(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this.supportsMasking = true;\r\n        _this.axis = config.axis == null ? -1 : config.axis;\r\n        _this.momentum = config.momentum == null ? 0.99 : config.momentum;\r\n        _this.epsilon = config.epsilon == null ? 1e-3 : config.epsilon;\r\n        _this.center = config.center == null ? true : config.center;\r\n        _this.scale = config.scale == null ? true : config.scale;\r\n        _this.betaInitializer = getInitializer(config.betaInitializer || 'zeros');\r\n        _this.gammaInitializer = getInitializer(config.gammaInitializer || 'ones');\r\n        _this.movingMeanInitializer =\r\n            getInitializer(config.movingMeanInitializer || 'zeros');\r\n        _this.movingVarianceInitializer =\r\n            getInitializer(config.movingVarianceInitializer || 'ones');\r\n        _this.betaConstraint = getConstraint(config.betaConstraint);\r\n        _this.gammaConstraint = getConstraint(config.gammaConstraint);\r\n        _this.betaRegularizer = getRegularizer(config.betaRegularizer);\r\n        _this.gammaRegularizer = getRegularizer(config.gammaRegularizer);\r\n        _this.stepCount = 0;\r\n        return _this;\r\n    }\r\n    BatchNormalization.prototype.build = function (inputShape) {\r\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\r\n        var axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\r\n        var dim = inputShape[axis];\r\n        if (dim == null) {\r\n            throw new ValueError(\"Axis \" + axis + \" of input tensor should have a defined dimension but \" +\r\n                \"the layer received an input with shape \" +\r\n                (JSON.stringify(inputShape) + \".\"));\r\n        }\r\n        this.inputSpec =\r\n            [new InputSpec({ ndim: inputShape.length, axes: (_a = {}, _a[axis] = dim, _a) })];\r\n        var shape = [dim];\r\n        if (this.scale) {\r\n            this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);\r\n        }\r\n        if (this.center) {\r\n            this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);\r\n        }\r\n        this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);\r\n        this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);\r\n        this.built = true;\r\n        var _a;\r\n    };\r\n    BatchNormalization.prototype.call = function (inputs, kwargs) {\r\n        var _this = this;\r\n        return tidy(function () {\r\n            var training = kwargs['training'] == null ? false : kwargs['training'];\r\n            var input = generic_utils.getExactlyOneTensor(inputs);\r\n            var inputShape = K.shape(input);\r\n            var ndim = inputShape.length;\r\n            var reductionAxes = range(0, ndim);\r\n            var axis = _this.axis >= 0 ? _this.axis : (_this.axis + ndim);\r\n            reductionAxes.splice(axis, 1);\r\n            var broadcastShape = generic_utils.pyListRepeat(1, ndim);\r\n            broadcastShape[axis] = inputShape[axis];\r\n            var sortedReductionAxes = reductionAxes.slice();\r\n            sortedReductionAxes.sort();\r\n            var needsBroadcasting = !util.arraysEqual(sortedReductionAxes, range(0, ndim).slice(0, ndim - 1));\r\n            var normalizeInference = function () {\r\n                if (needsBroadcasting) {\r\n                    var broadcastMovingMean = _this.movingMean.read().reshape(broadcastShape);\r\n                    var broadcastMovingVariance = _this.movingVariance.read().reshape(broadcastShape);\r\n                    var broadcastBeta = _this.center ? _this.beta.read().reshape(broadcastShape) : null;\r\n                    var broadcastGamma = _this.scale ? _this.gamma.read().reshape(broadcastShape) : null;\r\n                    return K.batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, _this.epsilon);\r\n                }\r\n                else {\r\n                    return K.batchNormalization(input, _this.movingMean.read(), _this.movingVariance.read(), _this.beta == null ? null : _this.beta.read(), _this.gamma == null ? null : _this.gamma.read(), _this.epsilon);\r\n                }\r\n            };\r\n            if (!training) {\r\n                return normalizeInference();\r\n            }\r\n            var _a = K.normalizeBatchInTraining(input, _this.gamma.read(), _this.beta.read(), reductionAxes, _this.epsilon), normedTraining = _a[0], mean = _a[1], variance = _a[2];\r\n            var sampleSize = arrayProd(reductionAxes.map(function (axis) { return input.shape[axis]; }));\r\n            var varianceDebiased = variance.mul(K.getScalar(sampleSize / (sampleSize - (1 + _this.epsilon))));\r\n            var updateMovingMeanAndVariance = function () {\r\n                _this.stepCount++;\r\n                var newMovingMean = movingAverage(_this.movingMean.read(), mean, _this.momentum, _this.stepCount);\r\n                _this.movingMean.write(newMovingMean);\r\n                var newMovingVariance = movingAverage(_this.movingVariance.read(), varianceDebiased, _this.momentum, _this.stepCount);\r\n                _this.movingVariance.write(newMovingVariance);\r\n            };\r\n            updateMovingMeanAndVariance();\r\n            return normedTraining;\r\n        });\r\n    };\r\n    BatchNormalization.prototype.getConfig = function () {\r\n        var config = {\r\n            axis: this.axis,\r\n            momentum: this.momentum,\r\n            epsilon: this.epsilon,\r\n            center: this.center,\r\n            scale: this.scale,\r\n            betaInitializer: serializeInitializer(this.betaInitializer),\r\n            gammaInitializer: serializeInitializer(this.gammaInitializer),\r\n            movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\r\n            movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer),\r\n            betaRegularizer: serializeRegularizer(this.betaRegularizer),\r\n            gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\r\n            betaConstraint: serializeConstraint(this.betaConstraint),\r\n            gammaConstraint: serializeConstraint(this.gammaConstraint)\r\n        };\r\n        var baseConfig = _super.prototype.getConfig.call(this);\r\n        Object.assign(config, baseConfig);\r\n        return config;\r\n    };\r\n    BatchNormalization.className = 'BatchNormalization';\r\n    return BatchNormalization;\r\n}(Layer));\r\nexport { BatchNormalization };\r\nserialization.SerializationMap.register(BatchNormalization);\r\n//# sourceMappingURL=normalization.js.map","map":"{\"version\":3,\"file\":\"normalization.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/layers/normalization.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/cais/tfjs/tfjs-layers/layers/normalization.d.ts","text":"import { serialization, Tensor } from '@tensorflow/tfjs-core';\r\nimport { Constraint, ConstraintIdentifier } from '../constraints';\r\nimport { Layer, LayerConfig } from '../engine/topology';\r\nimport { Initializer, InitializerIdentifier } from '../initializers';\r\nimport { Regularizer, RegularizerIdentifier } from '../regularizers';\r\nimport { Kwargs, Shape } from '../types';\r\nexport interface BatchNormalizationLayerConfig extends LayerConfig {\r\n    axis?: number;\r\n    momentum?: number;\r\n    epsilon?: number;\r\n    center?: boolean;\r\n    scale?: boolean;\r\n    betaInitializer?: InitializerIdentifier | Initializer;\r\n    gammaInitializer?: InitializerIdentifier | Initializer;\r\n    movingMeanInitializer?: InitializerIdentifier | Initializer;\r\n    movingVarianceInitializer?: InitializerIdentifier | Initializer;\r\n    betaConstraint?: ConstraintIdentifier | Constraint;\r\n    gammaConstraint?: ConstraintIdentifier | Constraint;\r\n    betaRegularizer?: RegularizerIdentifier | Regularizer;\r\n    gammaRegularizer?: RegularizerIdentifier | Regularizer;\r\n}\r\nexport declare class BatchNormalization extends Layer {\r\n    static className: string;\r\n    private readonly axis;\r\n    private readonly momentum;\r\n    private readonly epsilon;\r\n    private readonly center;\r\n    private readonly scale;\r\n    private readonly betaInitializer;\r\n    private readonly gammaInitializer;\r\n    private readonly movingMeanInitializer;\r\n    private readonly movingVarianceInitializer;\r\n    private readonly betaConstraint;\r\n    private readonly gammaConstraint;\r\n    private readonly betaRegularizer;\r\n    private readonly gammaRegularizer;\r\n    private gamma;\r\n    private beta;\r\n    private movingMean;\r\n    private movingVariance;\r\n    private stepCount;\r\n    constructor(config: BatchNormalizationLayerConfig);\r\n    build(inputShape: Shape | Shape[]): void;\r\n    call(inputs: Tensor | Tensor[], kwargs: Kwargs): Tensor | Tensor[];\r\n    getConfig(): serialization.ConfigDict;\r\n}\r\n"}}
